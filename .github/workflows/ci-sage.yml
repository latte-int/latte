name: Run Sage CI for Linux/Cygwin/macOS

## This GitHub Actions workflow provides:
##
##  - portability testing, by building and testing this project on many platforms
##    (Linux variants and Cygwin), each with two configurations (installed packages),
##
##  - continuous integration, by building and testing other software
##    that depends on this project.
##
## It runs on every push to the GitHub repository.
##
## The testing can be monitored in the "Actions" tab of the GitHub repository.
##
## After all jobs have finished (or are canceled) and a short delay,
## tar files of all logs are made available as "build artifacts".
##
## This GitHub Actions workflow uses the portability testing framework
## of SageMath (https://www.sagemath.org/).  For more information, see
## https://doc.sagemath.org/html/en/developer/portability_testing.html

## The workflow consists of two jobs:
##
##  - First, it builds a source distribution of the project
##    and generates a script "update-pkgs.sh".  It uploads them
##    as a build artifact named upstream.
##
##  - Second, it checks out a copy of the SageMath source tree.
##    It downloads the upstream artifact and replaces the project's
##    package in the SageMath distribution by the newly packaged one
##    from the upstream artifact, by running the script "update-pkgs.sh".
##    Then it builds a small portion of the Sage distribution.
##
## Many copies of the second step are run in parallel for each of the tested
## systems/configurations.

on: [push, pull_request, workflow_dispatch]

## Uncomment this (and comment the above) to run only on pushes to a tag,
## not on all pushes to a branch.
##
## on:
##   pull_request:
##     types: [opened, synchronize]
##   push:
##     tags:
##       - '*'
##   workflow_dispatch:
##     # Allow to run manually

env:
  # Ubuntu packages to install so that the project's "make dist" can succeed
  DIST_PREREQ:      libcdd-dev libgmp-dev libcdd-tools libntl-dev libtool
  # Name of this project in the Sage distribution
  SPKG:             latte_int
  # Sage distribution packages to build
  TARGETS_PRE:      build/make/Makefile
  TARGETS:          SAGE_CHECK=no SAGE_CHECK_PACKAGES=latte_int latte_int
  TARGETS_OPTIONAL:
  # Standard setting: Test the current beta release of Sage:
  SAGE_REPO:        sagemath/sage
  SAGE_REF:         develop
  # Temporarily test on the branch from sage ticket 29413 (updated cddlib)
  ## SAGE_TRAC_GIT:    https://github.com/sagemath/sagetrac-mirror.git
  ## SAGE_TICKET:      29413
  ## REMOVE_PATCHES:   "*"

jobs:

  dist:
    runs-on: ubuntu-latest
    steps:
      - name: Check out ${{ env.SPKG }}
        uses: actions/checkout@v2
        with:
          path: build/pkgs/${{ env.SPKG }}/src
      - name: Install prerequisites
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $DIST_PREREQ
      - name: Run make dist, prepare upstream artifact
        run: |
          (cd build/pkgs/${{ env.SPKG }}/src && autoreconf -fi && PATH="/usr/lib/cdd-tools:$PATH" ./configure && make dist) \
          && mkdir -p upstream && cp build/pkgs/${{ env.SPKG }}/src/*.tar.gz upstream/${{ env.SPKG }}-git.tar.gz \
          && echo "sage-package create ${{ env.SPKG }} --version git --tarball ${{ env.SPKG }}-git.tar.gz --type=optional" > upstream/update-pkgs.sh \
          && if [ -n "${{ env.REMOVE_PATCHES }}" ]; then echo "(cd ../build/pkgs/${{ env.SPKG }}/patches && rm -f ${{ env.REMOVE_PATCHES }}; :)" >> upstream/update-pkgs.sh; fi \
          && ls -l upstream/
      - uses: actions/upload-artifact@v2
        with:
          path: upstream
          name: upstream

  cygwin:
    uses: sagemath/sagetrac-mirror/.github/workflows/cygwin.yml@u/mkoeppe/ci_cygwin__refactor_using_reusable_workflows
    with:
      # FIXME: duplicated from env.TARGETS
      targets: SAGE_CHECK=no SAGE_CHECK_PACKAGES=latte_int latte_int
      prefix: /opt/sage-latte
      sage_repo: sagemath/sage
      sage_ref: develop
      upstream_artifact: upstream
    needs: [dist]

  linux:
    uses: sagemath/sagetrac-mirror/.github/workflows/docker.yml@u/mkoeppe/tox_yml__refactor_using_reusable_workflows
    with:
      # FIXME: duplicated from env.TARGETS
      targets: SAGE_CHECK=no SAGE_CHECK_PACKAGES=latte_int latte_int
      sage_repo: sagemath/sage
      sage_ref: develop
      upstream_artifact: upstream
      # We prefix the image name with the SPKG name ("latte-") to avoid the error
      # 'Package "sage-docker-..." is already associated with another repository.'
      docker_push_repository: ghcr.io/${{ github.repository }}/latte-
    needs: [dist]

  macos:

    runs-on: macos-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os: [ macos-10.15, macos-11.0 ]
        tox_system_factor: [homebrew-macos-usrlocal, conda-forge-macos]
        tox_packages_factor: [minimal, standard]
        xcode_version_factor: [default]

    needs: [dist]

    env:
      TOX_ENV: local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-tox-local-${{ matrix.tox_system_factor }}-${{ matrix.tox_packages_factor }}-${{ matrix.os }}-xcode_${{ matrix.xcode_version_factor }}
      DOCKER_TARGETS: configured with-targets with-targets-optional

    steps:

      - name: Select Xcode version
        run: |
          if [ ${{ matrix.xcode_version_factor }} != default ]; then sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode_version_factor }}.app; fi
      - name: Check out SageMath
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SAGE_REPO }}
          ref: ${{ env.SAGE_REF }}
          fetch-depth: 2000
        if: env.SAGE_REPO != ''
      - name: Check out git-trac-command
        uses: actions/checkout@v2
        with:
          repository: sagemath/git-trac-command
          path: git-trac-command
        if: env.SAGE_TRAC_GIT != ''
      - name: Check out SageMath from trac.sagemath.org
        shell: bash {0}
        run: |
          git config --global user.email "ci-sage@example.com"
          git config --global user.name "ci-sage workflow"
          if [ ! -d .git ]; then git init; fi; git remote add trac ${{ env.SAGE_TRAC_GIT }} && x=1 && while [ $x -le 5 ]; do x=$(( $x + 1 )); sleep $(( $RANDOM % 60 + 1 )); if git-trac-command/git-trac fetch $SAGE_TICKET; then git merge FETCH_HEAD || echo "(ignored)"; exit 0; fi; sleep 40; done; exit 1
        if: env.SAGE_TRAC_GIT != ''
      - uses: actions/download-artifact@v2
        with:
          path: upstream
          name: upstream
      - name: Update Sage packages from upstream artifact
        run: |
          (export PATH=$(pwd)/build/bin:$PATH; (cd upstream && bash -x update-pkgs.sh) && git diff)

      - name: Install test prerequisites
        run: |
          brew install tox
      - name: Build and test with tox
        # We use a high parallelization on purpose in order to catch possible parallelization bugs in the build scripts.
        # For doctesting, we use a lower parallelization to avoid timeouts.
        run: |
          MAKE="make -j12" tox -e $TOX_ENV -- SAGE_NUM_THREADS=4 $TARGETS
      - name: Prepare logs artifact
        run: |
          mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; cp -r .tox/*/log "artifacts/$LOGS_ARTIFACT_NAME"
        if: always()
      - uses: actions/upload-artifact@v1
        with:
          path: artifacts
          name: ${{ env.LOGS_ARTIFACT_NAME }}
        if: always()
      - name: Print out logs for immediate inspection
        # and markup the output with GitHub Actions logging commands
        run: |
          .github/workflows/scan-logs.sh "artifacts/$LOGS_ARTIFACT_NAME"
        if: always()
